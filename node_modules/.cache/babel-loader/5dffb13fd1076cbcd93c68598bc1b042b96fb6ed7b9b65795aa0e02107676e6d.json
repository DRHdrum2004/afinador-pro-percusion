{"ast":null,"code":"const createAudioAnalyzer = () => {\n  let audioContext;\n  let analyser;\n  let microphone;\n  let dataArray;\n  let scriptProcessor;\n  let isAnalyzing = false;\n  let sampleCount = 0;\n  const sampleSize = 5;\n  const frequencyHistory = [];\n  const startAnalysis = async onFrequencyDetected => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      analyser = audioContext.createAnalyser();\n      analyser.fftSize = 4096;\n\n      // Create low pass filter for kick drum\n      const filter = audioContext.createBiquadFilter();\n      filter.type = \"lowpass\";\n      filter.frequency.value = 200;\n      microphone = audioContext.createMediaStreamSource(stream);\n      microphone.connect(filter);\n      filter.connect(analyser);\n      scriptProcessor = audioContext.createScriptProcessor(2048, 1, 1);\n      analyser.connect(scriptProcessor);\n      scriptProcessor.connect(audioContext.destination);\n      dataArray = new Uint8Array(analyser.frequencyBinCount);\n      scriptProcessor.onaudioprocess = () => {\n        analyser.getByteFrequencyData(dataArray);\n        let maxAmplitude = 0;\n        let maxIndex = 0;\n        for (let i = 0; i < dataArray.length; i++) {\n          if (dataArray[i] > maxAmplitude) {\n            maxAmplitude = dataArray[i];\n            maxIndex = i;\n          }\n        }\n        const frequency = maxIndex * audioContext.sampleRate / analyser.fftSize;\n        frequencyHistory.push(frequency);\n\n        // Only report every 5 samples for stability\n        sampleCount++;\n        if (sampleCount >= sampleSize) {\n          const avgFrequency = frequencyHistory.slice(-sampleSize).reduce((a, b) => a + b, 0) / sampleSize;\n          onFrequencyDetected(Math.round(avgFrequency));\n          sampleCount = 0;\n        }\n      };\n      isAnalyzing = true;\n      return true;\n    } catch (error) {\n      console.error('Error al acceder al micrófono:', error);\n      return false;\n    }\n  };\n  const stopAnalysis = () => {\n    if (!isAnalyzing) return;\n    if (scriptProcessor) {\n      scriptProcessor.disconnect();\n      scriptProcessor.onaudioprocess = null;\n    }\n    if (microphone) {\n      microphone.disconnect();\n    }\n    if (audioContext && audioContext.state !== 'closed') {\n      audioContext.close();\n    }\n    isAnalyzing = false;\n  };\n  return {\n    startAnalysis,\n    stopAnalysis\n  };\n};\nexport default createAudioAnalyzer;","map":{"version":3,"names":["createAudioAnalyzer","audioContext","analyser","microphone","dataArray","scriptProcessor","isAnalyzing","sampleCount","sampleSize","frequencyHistory","startAnalysis","onFrequencyDetected","stream","navigator","mediaDevices","getUserMedia","audio","window","AudioContext","webkitAudioContext","createAnalyser","fftSize","filter","createBiquadFilter","type","frequency","value","createMediaStreamSource","connect","createScriptProcessor","destination","Uint8Array","frequencyBinCount","onaudioprocess","getByteFrequencyData","maxAmplitude","maxIndex","i","length","sampleRate","push","avgFrequency","slice","reduce","a","b","Math","round","error","console","stopAnalysis","disconnect","state","close"],"sources":["/data/data/com.termux/files/home/mi_proyecto/src/utils/audioAnalyzer.js"],"sourcesContent":["const createAudioAnalyzer = () => {\n  let audioContext;\n  let analyser;\n  let microphone;\n  let dataArray;\n  let scriptProcessor;\n  let isAnalyzing = false;\n  let sampleCount = 0;\n  const sampleSize = 5;\n  const frequencyHistory = [];\n\n  const startAnalysis = async (onFrequencyDetected) => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      analyser = audioContext.createAnalyser();\n      analyser.fftSize = 4096;\n      \n      // Create low pass filter for kick drum\n      const filter = audioContext.createBiquadFilter();\n      filter.type = \"lowpass\";\n      filter.frequency.value = 200;\n\n      microphone = audioContext.createMediaStreamSource(stream);\n      microphone.connect(filter);\n      filter.connect(analyser);\n      \n      scriptProcessor = audioContext.createScriptProcessor(2048, 1, 1);\n      analyser.connect(scriptProcessor);\n      scriptProcessor.connect(audioContext.destination);\n      \n      dataArray = new Uint8Array(analyser.frequencyBinCount);\n      \n      scriptProcessor.onaudioprocess = () => {\n        analyser.getByteFrequencyData(dataArray);\n        \n        let maxAmplitude = 0;\n        let maxIndex = 0;\n        \n        for (let i = 0; i < dataArray.length; i++) {\n          if (dataArray[i] > maxAmplitude) {\n            maxAmplitude = dataArray[i];\n            maxIndex = i;\n          }\n        }\n        \n        const frequency = maxIndex * audioContext.sampleRate / analyser.fftSize;\n        frequencyHistory.push(frequency);\n        \n        // Only report every 5 samples for stability\n        sampleCount++;\n        if (sampleCount >= sampleSize) {\n          const avgFrequency = frequencyHistory.slice(-sampleSize).reduce((a, b) => a + b, 0) / sampleSize;\n          onFrequencyDetected(Math.round(avgFrequency));\n          sampleCount = 0;\n        }\n      };\n      \n      isAnalyzing = true;\n      return true;\n    } catch (error) {\n      console.error('Error al acceder al micrófono:', error);\n      return false;\n    }\n  };\n\n  const stopAnalysis = () => {\n    if (!isAnalyzing) return;\n    \n    if (scriptProcessor) {\n      scriptProcessor.disconnect();\n      scriptProcessor.onaudioprocess = null;\n    }\n    \n    if (microphone) {\n      microphone.disconnect();\n    }\n    \n    if (audioContext && audioContext.state !== 'closed') {\n      audioContext.close();\n    }\n    \n    isAnalyzing = false;\n  };\n\n  return { startAnalysis, stopAnalysis };\n};\n\nexport default createAudioAnalyzer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}